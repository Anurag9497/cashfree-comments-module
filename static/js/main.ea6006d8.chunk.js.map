{"version":3,"sources":["components/Select/index.js","components/Display/index.js","components/TextArea/index.js","App.js","reportWebVitals.js","index.js"],"names":["Select","comment","setComment","styleObject","className","style","id","onChange","event","newComment","username","target","value","Display","item","updateReply","useState","flag","setFlag","createdAt","reply","setReply","handleSubmitReply","uid","alert","toUpperCase","toLocaleDateString","hour12","toLocaleTimeString","map","data","index","marginBottom","marginTop","type","newReply","Date","onClick","TextArea","userComments","setUserComments","newUserComment","App","newArr","obj","justifyContent","itemIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAwBeA,MArBf,YAAqD,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,YASlC,OACI,qBAAKC,UAAU,aAAaC,MAAOF,EAAnC,SACI,yBAAQG,GAAG,WAAWC,SAVX,SAACC,GAChB,IAAIC,EAAU,2BACPR,GADO,IAEVS,SAAWF,EAAMG,OAAOC,QAE5BV,EAAWO,IAKP,UACI,wBAAQG,MAAM,GAAd,yBACA,wBAAQA,MAAM,QAAd,oBACA,wBAAQA,MAAM,QAAd,oBACA,wBAAQA,MAAM,QAAd,0B,MCgDDC,MA9Df,YAAuC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,YACpB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,CAC/BN,SAAW,GACXS,UAAY,GACZC,MAAQ,KAHZ,mBAAOA,EAAP,KAAcC,EAAd,KAuBMC,EAAoB,SAACC,GACH,KAAjBH,EAAMV,UAA+B,KAAdU,EAAMA,OAE5BL,EAAYK,EAAOG,GAnBvBF,EAAS,CACLX,SAAW,GACXS,UAAY,GACZC,MAAQ,KAkBRF,GAAQ,IAIRM,MAAM,sBAId,OACI,sBAAKlB,GAAG,UAAR,UACI,sBAAKA,GAAG,kBAAR,UAA2BQ,EAAKJ,SAASe,cAAzC,iBAAsEX,EAAKK,UAAUO,mBAAmB,QAAQ,CAACC,QAAS,IAA1H,IAAmIb,EAAKK,UAAUS,mBAAmB,QAAQ,CAACD,QAAS,IAAvL,MAAkMb,EAAKb,WACtMa,EAAKM,MAAMS,KAAI,SAACC,EAAMC,GACnB,OACI,sBAEI3B,UAAU,QAFd,UAIK0B,EAAKpB,SAASe,cAJnB,eAI8CK,EAAKX,UAAUO,mBAAmB,QAAQ,CAACC,QAAS,IAJlG,IAI2GG,EAAKX,UAAUS,mBAAmB,QAAQ,CAACD,QAAS,IAJ/J,MAI0KG,EAAKV,QAHtKW,MAOhBd,EAAO,gCACI,cAAC,EAAD,CAAQhB,QAASmB,EAAOlB,WAAYmB,EAAUlB,YAAa,CAAC6B,aAAe,MAAOC,UAAW,SAC7F,uBAAOC,KAAK,OAAO9B,UAAU,cAAcQ,MAAOQ,EAAMA,MAAOb,SArCzD,SAACC,GACvB,IAAI2B,EAAQ,2BACLf,GADK,IAERD,UAAY,IAAIiB,KAChBhB,MAAQZ,EAAMG,OAAOC,QAEzBS,EAASc,MAgCO,wBAAQD,KAAK,SAAS5B,GAAG,YAAY+B,QAAS,kBAAMf,EAAkBR,EAAKJ,WAA3E,sBAEJ,wBAAQwB,KAAK,SAAS5B,GAAG,gBAAgB+B,QAAS,kBAAMnB,GAAQ,IAAhE,uB,MCdLoB,MA3Cf,YAAyE,IAAtDrC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,WAAYqC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,gBAmClD,OACI,sBAAKpC,UAAU,eAAf,UACI,0BAAUQ,MAAOX,EAAQA,QAASK,GAAG,UAAUC,SA3BhC,SAACC,GACpB,IAAIC,EAAU,2BACPR,GADO,IAEVkB,UAAY,IAAIiB,KAChBnC,QAAUO,EAAMG,OAAOC,QAE3BV,EAAWO,MAsBP,wBAAQyB,KAAK,SAAS5B,GAAG,cAAc+B,QAlBzB,WAClB,GAAsB,KAAnBpC,EAAQS,UAAmC,KAAlBT,EAAQA,QACpC,CACI,IAAIwC,EAAc,sBACXF,GADW,CAEdtC,IAEJuC,EAAgBC,GAzBpBvC,EAAW,CACPQ,SAAW,GACXS,UAAY,GACZlB,QAAU,GACVmB,MAAQ,UA0BRI,MAAM,sBAMN,yBCaGkB,MAhDf,WACE,MAAwC1B,mBAAS,IAAjD,mBAAOuB,EAAP,KAAqBC,EAArB,KACA,EAA8BxB,mBAAS,CACnCN,SAAW,GACXS,UAAY,GACZlB,QAAU,GACVmB,MAAQ,KAJZ,mBAAOnB,EAAP,KAAgBC,EAAhB,KAOMa,EAAc,SAACK,EAAOG,GACxB,IAAIoB,EAASJ,EAAaV,KAAI,SAAAe,GAC5B,OAAGA,EAAIlC,WAAWa,EAET,2BACFqB,GADL,IAEExB,MAAK,sBAAOwB,EAAIxB,OAAX,CAAkBA,MAKlBwB,KAGXJ,EAAgBG,IAGpB,OACE,sBAAKvC,UAAU,MAAf,UACE,gCACE,cAAC,EAAD,CAAQH,QAASA,EAASC,WAAYA,EAAYC,YAAa,CAAC6B,aAAe,MAAOa,eAAgB,YACtG,cAAC,EAAD,CACE5C,QAASA,EACTC,WAAYA,EACZqC,aAAcA,EACdC,gBAAiBA,OAGrB,qBAAKlC,GAAG,eAAR,SACGiC,EAAaV,KAAI,SAACf,EAAMgC,GACvB,OACE,cAAC,EAAD,CAAyBhC,KAAMA,EAAMC,YAAaA,GAApC+B,YClCXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea6006d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction Select({comment, setComment, styleObject}) {\r\n    const handleUser = (event) => {\r\n        let newComment = {\r\n            ...comment,\r\n            username : event.target.value\r\n        };\r\n        setComment(newComment);\r\n    };\r\n\r\n    return (\r\n        <div className=\"select-div\" style={styleObject}>\r\n            <select id=\"username\" onChange={handleUser}>\r\n                <option value=\"\">Select User</option>\r\n                <option value=\"user1\">User 1</option>\r\n                <option value=\"user2\">User 2</option>\r\n                <option value=\"user3\">User 3</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Select;\r\n","import React,{ useState } from 'react';\r\nimport Select from '../Select';\r\nimport './index.css';\r\n\r\nfunction Display({item, updateReply}) {\r\n    const [flag, setFlag] = useState(false);\r\n    const [reply, setReply] = useState({\r\n        username : \"\",\r\n        createdAt : \"\",\r\n        reply : \"\"\r\n    });\r\n\r\n    const resetReply = () => {\r\n        setReply({\r\n            username : \"\",\r\n            createdAt : \"\",\r\n            reply : \"\"\r\n        });\r\n    };\r\n\r\n    const handleReplyChange = (event) => {\r\n        let newReply = {\r\n            ...reply,\r\n            createdAt : new Date(),\r\n            reply : event.target.value\r\n        };\r\n        setReply(newReply);\r\n    };\r\n\r\n    const handleSubmitReply = (uid) => {\r\n        if(reply.username!==\"\" && reply.reply!==\"\")\r\n        {\r\n            updateReply(reply, uid);\r\n            resetReply();\r\n            setFlag(false);\r\n        }\r\n        else\r\n        {\r\n            alert(\"Fields are empty!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"display\">\r\n            <div id=\"display-comment\">{item.username.toUpperCase()} Commented at {item.createdAt.toLocaleDateString('en-US',{hour12 : true})} {item.createdAt.toLocaleTimeString('en-US',{hour12 : true})} : {item.comment}</div>\r\n            {item.reply.map((data, index) => {\r\n                return(\r\n                    <div \r\n                        key={index} \r\n                        className=\"reply\"\r\n                    >\r\n                        {data.username.toUpperCase()} Replied at {data.createdAt.toLocaleDateString('en-US',{hour12 : true})} {data.createdAt.toLocaleTimeString('en-US',{hour12 : true})} : {data.reply}\r\n                    </div>\r\n                );\r\n            })}\r\n            {flag ? <div>\r\n                        <Select comment={reply} setComment={setReply} styleObject={{marginBottom : '0em', marginTop: '1em'}}/>\r\n                        <input type=\"text\" className=\"reply-input\" value={reply.reply} onChange={handleReplyChange}/>\r\n                        <button type=\"button\" id=\"reply-btn\" onClick={() => handleSubmitReply(item.username)}>Reply</button>\r\n                    </div> :\r\n                    <button type=\"button\" id=\"reply-btn-new\" onClick={() => setFlag(true)}>Reply</button> \r\n            } \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction TextArea({comment, setComment, userComments, setUserComments}) {\r\n    const reset = () => {\r\n        setComment({\r\n            username : \"\",\r\n            createdAt : \"\",\r\n            comment : \"\",\r\n            reply : []\r\n        });\r\n    };\r\n\r\n    const handleTextArea = (event) => {\r\n        let newComment = {\r\n            ...comment,\r\n            createdAt : new Date(),\r\n            comment : event.target.value\r\n        };\r\n        setComment(newComment);\r\n    };\r\n\r\n\r\n    const handleComment = () => {\r\n        if(comment.username!==\"\" && comment.comment!==\"\")\r\n        {\r\n            let newUserComment = [\r\n                ...userComments,\r\n                comment\r\n            ];\r\n            setUserComments(newUserComment);\r\n            reset();\r\n        }\r\n        else\r\n        {\r\n            alert(\"Fields are empty!\");\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"textArea-div\">\r\n            <textarea value={comment.comment} id=\"comment\" onChange={handleTextArea}></textarea>\r\n            <button type=\"button\" id=\"comment-btn\" onClick={handleComment} >Comment</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextArea;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Display from './components/Display';\nimport Select from './components/Select';\nimport TextArea from './components/TextArea';\n\nfunction App() {\n  const [userComments, setUserComments] = useState([]);\n  const [comment, setComment] = useState({\n      username : \"\",\n      createdAt : \"\",\n      comment : \"\",\n      reply : []\n  });\n\n  const updateReply = (reply, uid) => {\n      let newArr = userComments.map(obj => {\n        if(obj.username===uid)\n        {\n          return {\n            ...obj,\n            reply : [...obj.reply, reply]\n          };\n        }\n        else\n        {\n          return obj;\n        }\n      });\n      setUserComments(newArr);\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Select comment={comment} setComment={setComment} styleObject={{marginBottom : '1em', justifyContent: 'center'}} />\n        <TextArea \n          comment={comment} \n          setComment={setComment}\n          userComments={userComments}\n          setUserComments={setUserComments}\n        />\n      </div>\n      <div id=\"userComments\">\n        {userComments.map((item, itemIndex) => {\n          return(\n            <Display key={itemIndex} item={item} updateReply={updateReply} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}